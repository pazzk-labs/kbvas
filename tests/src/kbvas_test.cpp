/*
 * SPDX-FileCopyrightText: 2025 권경환 Kyunghwan Kwon <k@pazzk.net>
 *
 * SPDX-License-Identifier: MIT
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockSupport.h"

#include "kbvas.h"
#include "kbvas_memory_backend.h"

#if KBVAS_CELL_VOLTAGE_MAX_COUNT == 960
static const uint8_t sample1[] = {
	0xa1,0x04,0x66,0xbc,0x6d,0x23,0xa2,0x11,0x35,0x59,0x4a,0x5a,0x45,0x43,0x38,0x45,
	0x30,0x32,0x41,0x31,0x33,0x35,0x30,0x32,0x35,0xa3,0x01,0xc6,0xa4,0x01,0x64,0xa5,
	0x02,0x10,0xa1,0xa6,0x02,0x20,0x41,0xa7,0x03,0xc0,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,
	0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0x96,0xa8,0x14,0x3f,0x3f,0x3f,0x3f,
	0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f
};

static const uint8_t sample2[] = {
	0xa1,0x04,0x66,0xbc,0x6d,0x24,0xa2,0x11,0x35,0x59,0x4a,0x5a,0x45,0x43,0x38,0x45,
	0x30,0x32,0x41,0x31,0x33,0x35,0x30,0x32,0x35,0xa3,0x01,0xc5,0xa4,0x01,0x64,0xa5,
	0x02,0x0f,0xa0,0xa6,0x02,0x1f,0x40,0xa7,0x03,0xc0,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,
	0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xc8,0xa8,0x14,0x3e,0x3e,0x3e,0x3e,
	0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,0x3e,
};

const uint8_t expected1[] = {
	0x23,0x6d,0xbc,0x66,0x00,0x00,0x00,0x00,0x6f,0x68,0x45,0x31,0x57,0x55,0x70,0x61,
	0x52,0x55,0x4d,0x34,0x52,0x54,0x41,0x79,0x51,0x54,0x45,0x7a,0x4e,0x54,0x41,0x79,
	0x4e,0x61,0x4d,0x42,0x78,0x71,0x51,0x42,0x5a,0x4b,0x55,0x43,0x45,0x4b,0x47,0x6d,
	0x41,0x69,0x42,0x42,0x70,0x77,0x50,0x41,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,
	0x6c,0x70,0x61,0x57,0x6c,0x70,0x61,0x57,0x71,0x42,0x51,0x2f,0x50,0x7a,0x38,0x2f,
	0x50,0x7a,0x38,0x2f,0x50,0x7a,0x38,0x2f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
static const uint8_t expected2[] = {
	0x24,0x6d,0xbc,0x66,0x00,0x00,0x00,0x00,0x6f,0x68,0x45,0x31,0x57,0x55,0x70,0x61,
	0x52,0x55,0x4d,0x34,0x52,0x54,0x41,0x79,0x51,0x54,0x45,0x7a,0x4e,0x54,0x41,0x79,
	0x4e,0x61,0x4d,0x42,0x78,0x61,0x51,0x42,0x5a,0x4b,0x55,0x43,0x44,0x36,0x43,0x6d,
	0x41,0x68,0x39,0x41,0x70,0x77,0x50,0x41,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,
	0x79,0x4d,0x6a,0x49,0x79,0x4d,0x6a,0x49,0x71,0x42,0x51,0x2b,0x50,0x6a,0x34,0x2b,
	0x50,0x6a,0x34,0x2b,0x50,0x6a,0x34,0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
#elif KBVAS_CELL_VOLTAGE_MAX_COUNT == 192
#else
#error "Unsupported KBVAS_CELL_VOLTAGE_MAX_COUNT"
#endif

static bool count_iterator(struct kbvas *self,
		const struct kbvas_entry *entry, void *ctx) {
	int *counter = (int *)ctx;
	(*counter)++;
	return true;
}

static bool stop_after_one(struct kbvas *self,
		const struct kbvas_entry *entry, void *ctx) {
	int *counter = (int *)ctx;
	(*counter)++;
	return false;
}

static void on_batch_callback(struct kbvas *self, void *ctx) {
	// Mock callback for batch ready event
	mock().actualCall("on_batch_callback")
		.withPointerParameter("self", self)
		.withPointerParameter("ctx", ctx);
	if (ctx) {
		int *counter = (int *)ctx;
		(*counter)++;
	}
}

TEST_GROUP(KBVAS) {
	struct kbvas *kbvas;
	struct kbvas_backend_api *backend;

	void setup(void) {
		backend = kbvas_memory_backend_create();
		kbvas = kbvas_create(backend, NULL);
	}
	void teardown(void) {
		kbvas_destroy(kbvas);
		kbvas_memory_backend_destroy(backend);

		mock().checkExpectations();
		mock().clear();
	}
};

TEST(KBVAS, enqueue_ShouldReturnNoError_WhenEnqueueingValidData) {
	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_enqueue(kbvas, sample1, sizeof(sample1)));
	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_enqueue(kbvas, sample2, sizeof(sample2)));
}

TEST(KBVAS, dequeue_ShouldReturnEntriesInOrder) {
	struct kbvas_entry entry1;
	struct kbvas_entry entry2;

	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_enqueue(kbvas, sample1, sizeof(sample1)));
	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_enqueue(kbvas, sample2, sizeof(sample2)));

	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_dequeue(kbvas, &entry1));
	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_dequeue(kbvas, &entry2));

	LONGS_EQUAL(sizeof(expected1), sizeof(entry1));
	LONGS_EQUAL(sizeof(expected2), sizeof(entry2));
	LONGS_EQUAL(0, memcmp(expected1, &entry1, sizeof(expected1)));
	LONGS_EQUAL(0, memcmp(expected2, &entry2, sizeof(expected2)));
}

TEST(KBVAS, peek_ShouldFail_WhenEmpty) {
	struct kbvas_entry entry;
	LONGS_EQUAL(KBVAS_ERROR_NOENT, kbvas_peek(kbvas, &entry));
}

TEST(KBVAS, dequeue_ShouldFail_WhenEmpty) {
	struct kbvas_entry entry;
	LONGS_EQUAL(KBVAS_ERROR_NOENT, kbvas_dequeue(kbvas, &entry));
}

TEST(KBVAS, enqueue_ShouldFailWithInvalidArgs) {
	LONGS_EQUAL(KBVAS_ERROR_MISSING_PARAM, kbvas_enqueue(NULL, "\x00\x01\x02\x03\x04\x05", 6));
	LONGS_EQUAL(KBVAS_ERROR_MISSING_PARAM, kbvas_enqueue(kbvas, NULL, 6));
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, kbvas_enqueue(kbvas, "\x00\x01", 2));
}

TEST(KBVAS, clear_batch_ShouldRemoveEntries) {
	kbvas_set_batch_count(kbvas, 2);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);

	LONGS_EQUAL(true, kbvas_is_batch_ready(kbvas));
	kbvas_clear_batch(kbvas);
	LONGS_EQUAL(false, kbvas_is_batch_ready(kbvas));
}

TEST(KBVAS, iterate_ShouldVisitAll_WhenMaxCountZero) {
	for (int i = 0; i < 3; ++i) {
		kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	}

	int visited = 0;
	kbvas_iterate(kbvas, count_iterator, &visited);
	LONGS_EQUAL(3, visited);
}

TEST(KBVAS, iterate_ShouldStopEarlyWhenCallbackReturnsFalse) {
	for (int i = 0; i < 3; ++i) {
		kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	}

	int visited = 0;

	kbvas_iterate(kbvas, stop_after_one, &visited);
	LONGS_EQUAL(1, visited);
}

// Edge cases and error handling tests
TEST(KBVAS, enqueue_ShouldRejectTruncatedTLV_WhenLengthExceedsData) {
	// TYPE_BSV with length field indicating more data than available
	// 0xA7 = TYPE_BSV, length = 0x00FF (255 bytes), but only 3 bytes of data
	const uint8_t truncated_bsv[] = {0xA7, 0x00, 0xFF, 0x01, 0x02, 0x03};

	kbvas_error_t err = kbvas_enqueue(kbvas, truncated_bsv, sizeof(truncated_bsv));
	// Should reject due to insufficient data
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldRejectShortTimestamp) {
	// TYPE_TIMESTAMP requires 4 bytes but only 2 provided
	// 0xA1 = TYPE_TIMESTAMP, length = 2, but parse_battery expects 4 bytes
	const uint8_t short_timestamp[] = {0xA1, 0x02, 0x00, 0x01};

	kbvas_error_t err = kbvas_enqueue(kbvas, short_timestamp, sizeof(short_timestamp));
	// Should reject due to insufficient timestamp data
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldRejectShortBPA) {
	// TYPE_BPA requires 2 bytes but only 1 provided
	// 0xA5 = TYPE_BPA, length = 1
	const uint8_t short_bpa[] = {0xA5, 0x01, 0xFF};

	kbvas_error_t err = kbvas_enqueue(kbvas, short_bpa, sizeof(short_bpa));
	// Should reject due to insufficient BPA data
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldRejectShortBPV) {
	// TYPE_BPV requires 2 bytes but only 1 provided
	// 0xA6 = TYPE_BPV, length = 1
	const uint8_t short_bpv[] = {0xA6, 0x01, 0xFF};

	kbvas_error_t err = kbvas_enqueue(kbvas, short_bpv, sizeof(short_bpv));
	// Should reject due to insufficient BPV data
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldHandleUnknownType) {
	// Unknown type should be skipped without causing infinite loop
	const uint8_t unknown_type[] = {0xFF, 0x02, 0x00, 0x01};

	kbvas_error_t err = kbvas_enqueue(kbvas, unknown_type, sizeof(unknown_type));
	// parse_tlv returns 0 for unknown types, which should trigger error
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldRejectZeroLengthTimestamp) {
	// TYPE_TIMESTAMP with zero length (requires 4 bytes)
	const uint8_t zero_len[] = {0xA1, 0x00};

	kbvas_error_t err = kbvas_enqueue(kbvas, zero_len, sizeof(zero_len));
	// Should reject due to insufficient length
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldRejectVeryLargeLength) {
	// TYPE_BSV with extremely large length (potential overflow)
	// 0xA7 = TYPE_BSV, length = 0xFFFF
	const uint8_t large_len[] = {0xA7, 0xFF, 0xFF, 0x01, 0x02};

	kbvas_error_t err = kbvas_enqueue(kbvas, large_len, sizeof(large_len));
	// Should detect that actual data size is insufficient
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldRejectMultipleTLVsWithTruncation) {
	// First TLV valid, second TLV truncated
	const uint8_t multi_tlv[] = {
		0xA1, 0x04, 0x00, 0x00, 0x00, 0x01,  // Valid TIMESTAMP
		0xA7, 0x00, 0xFF  // Truncated BSV (claims 255 bytes but none available)
	};

	kbvas_error_t err = kbvas_enqueue(kbvas, multi_tlv, sizeof(multi_tlv));
	// Should reject when processing truncated second TLV
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldHandlePartialTypeHeader) {
	// Only type byte, no length field
	const uint8_t partial[] = {0xA1};

	kbvas_error_t err = kbvas_enqueue(kbvas, partial, sizeof(partial));
	// Should fail with invalid format
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldHandlePartialLengthField) {
	// TYPE_BSV with only 1 byte of length field (needs 2)
	const uint8_t partial_len[] = {0xA7, 0x00};

	kbvas_error_t err = kbvas_enqueue(kbvas, partial_len, sizeof(partial_len));
	// Should fail with invalid format
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, setBatchCount_ShouldRejectOverMax) {
	// Test boundary condition for batch count
	kbvas_set_batch_count(kbvas, KBVAS_MAX_BATCH_COUNT);
	LONGS_EQUAL(KBVAS_MAX_BATCH_COUNT, kbvas_get_batch_count(kbvas));

	// Should reject values over max
	kbvas_set_batch_count(kbvas, KBVAS_MAX_BATCH_COUNT + 1);
	LONGS_EQUAL(KBVAS_MAX_BATCH_COUNT, kbvas_get_batch_count(kbvas));
}

TEST(KBVAS, peek_ShouldNotModifyQueue) {
	struct kbvas_entry entry1, entry2;

	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);

	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_peek(kbvas, &entry1));
	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_peek(kbvas, &entry2));

	// Both peeks should return the same data
	LONGS_EQUAL(0, memcmp(&entry1, &entry2, sizeof(entry1)));

	// Queue should still have the entry
	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_dequeue(kbvas, &entry1));
}

TEST(KBVAS, clearBatch_ShouldHandlePartialBatch) {
	kbvas_set_batch_count(kbvas, 5);

	// Add only 3 entries (less than batch count)
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x03", 6);

	LONGS_EQUAL(false, kbvas_is_batch_ready(kbvas));

	kbvas_clear_batch(kbvas);

	// Should clear all 3 entries
	struct kbvas_entry entry;
	LONGS_EQUAL(KBVAS_ERROR_NOENT, kbvas_dequeue(kbvas, &entry));
}

TEST(KBVAS, nullPointerChecks_ShouldHandleGracefully) {
	struct kbvas_entry entry;

	// NULL kbvas pointer checks
	LONGS_EQUAL(KBVAS_ERROR_MISSING_PARAM, kbvas_peek(NULL, &entry));
	LONGS_EQUAL(KBVAS_ERROR_MISSING_PARAM, kbvas_dequeue(NULL, &entry));
	LONGS_EQUAL(KBVAS_ERROR_MISSING_PARAM, kbvas_enqueue(NULL, "data", 4));

	// NULL entry pointer checks
	LONGS_EQUAL(KBVAS_ERROR_MISSING_PARAM, kbvas_peek(kbvas, NULL));

	// NULL in iterate
	kbvas_iterate(NULL, count_iterator, NULL);
	kbvas_iterate(kbvas, NULL, NULL);

	// NULL in clear functions (should not crash)
	kbvas_clear(NULL);
	kbvas_clear_batch(NULL);

	// NULL in getter/setter
	LONGS_EQUAL(0, kbvas_get_batch_count(NULL));
	kbvas_set_batch_count(NULL, 10);
}

TEST(KBVAS, enqueue_ShouldAcceptValidTLVWithExactLength) {
	// TYPE_TIMESTAMP with exactly 4 bytes - should succeed
	const uint8_t valid_timestamp[] = {0xA1, 0x04, 0x00, 0x00, 0x00, 0x01};

	kbvas_error_t err = kbvas_enqueue(kbvas, valid_timestamp, sizeof(valid_timestamp));
	LONGS_EQUAL(KBVAS_ERROR_NONE, err);

	struct kbvas_entry entry;
	LONGS_EQUAL(KBVAS_ERROR_NONE, kbvas_dequeue(kbvas, &entry));
	LONGS_EQUAL(1, entry.timestamp);
}

TEST(KBVAS, enqueue_ShouldAcceptValidBSVWithMinimumLength) {
	// TYPE_BSV with minimal valid data (MIN_TLV_LEN = 6 bytes minimum)
	// 0xA7 = TYPE_BSV, length = 0x0003 (3 bytes), + 3 bytes data = 6 total
	const uint8_t valid_bsv[] = {0xA7, 0x00, 0x03, 0xAA, 0xBB, 0xCC};

	kbvas_error_t err = kbvas_enqueue(kbvas, valid_bsv, sizeof(valid_bsv));
	LONGS_EQUAL(KBVAS_ERROR_NONE, err);
}

TEST(KBVAS, enqueue_ShouldRejectBSVWithInsufficientData) {
	// TYPE_BSV claims 2 bytes but only 1 available
	const uint8_t invalid_bsv[] = {0xA7, 0x00, 0x02, 0xAA};

	kbvas_error_t err = kbvas_enqueue(kbvas, invalid_bsv, sizeof(invalid_bsv));
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, enqueue_ShouldHandleLargeBSVLength) {
	// TYPE_BSV with large but valid length
	// Header (3 bytes) + data (100 bytes) = 103 bytes total
	uint8_t large_bsv[103];
	large_bsv[0] = 0xA7;  // TYPE_BSV
	large_bsv[1] = 0x00;  // Length high byte
	large_bsv[2] = 0x64;  // Length low byte (100 decimal)
	// Fill with dummy data
	for (int i = 3; i < 103; i++) {
		large_bsv[i] = 0xBB;
	}

	kbvas_error_t err = kbvas_enqueue(kbvas, large_bsv, sizeof(large_bsv));
	LONGS_EQUAL(KBVAS_ERROR_NONE, err);
}

TEST(KBVAS, enqueue_ShouldRejectTLVAtExactBoundary) {
	// TYPE_BSV with length exactly at buffer boundary (off-by-one)
	const uint8_t boundary_bsv[] = {0xA7, 0x00, 0x04, 0xAA, 0xBB};
	// Claims 4 bytes but only 2 available (0xAA, 0xBB)

	kbvas_error_t err = kbvas_enqueue(kbvas, boundary_bsv, sizeof(boundary_bsv));
	LONGS_EQUAL(KBVAS_ERROR_INVALID_FORMAT, err);
}

TEST(KBVAS, count_ShouldReturnZero_WhenNullPointer) {
	LONGS_EQUAL(0, kbvas_count(NULL));
}

TEST(KBVAS, count_ShouldReturnZero_WhenEmpty) {
	LONGS_EQUAL(0, kbvas_count(kbvas));
}

TEST(KBVAS, count_ShouldIncrement_WhenEnqueueing) {
	LONGS_EQUAL(0, kbvas_count(kbvas));

	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	LONGS_EQUAL(1, kbvas_count(kbvas));

	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
	LONGS_EQUAL(2, kbvas_count(kbvas));

	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x03", 6);
	LONGS_EQUAL(3, kbvas_count(kbvas));
}

TEST(KBVAS, count_ShouldDecrement_WhenDequeuing) {
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x03", 6);

	LONGS_EQUAL(3, kbvas_count(kbvas));

	struct kbvas_entry entry;
	kbvas_dequeue(kbvas, &entry);
	LONGS_EQUAL(2, kbvas_count(kbvas));

	kbvas_dequeue(kbvas, &entry);
	LONGS_EQUAL(1, kbvas_count(kbvas));

	kbvas_dequeue(kbvas, &entry);
	LONGS_EQUAL(0, kbvas_count(kbvas));
}

TEST(KBVAS, count_ShouldReturnCorrectValue_AfterClear) {
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
	LONGS_EQUAL(2, kbvas_count(kbvas));

	kbvas_clear(kbvas);
	LONGS_EQUAL(0, kbvas_count(kbvas));
}

TEST(KBVAS, registerBatchCallback_ShouldReturnError_WhenNullPointer) {
	LONGS_EQUAL(KBVAS_ERROR_MISSING_PARAM,
		kbvas_register_batch_callback(NULL, on_batch_callback, NULL));
}

TEST(KBVAS, registerBatchCallback_ShouldReturnNoError_WhenValidParams) {
	LONGS_EQUAL(KBVAS_ERROR_NONE,
		kbvas_register_batch_callback(kbvas, on_batch_callback, NULL));
}

TEST(KBVAS, registerBatchCallback_ShouldAllowNullCallback) {
	LONGS_EQUAL(KBVAS_ERROR_NONE,
		kbvas_register_batch_callback(kbvas, NULL, NULL));
}

TEST(KBVAS, batchCallback_ShouldBeCalled_WhenBatchReady) {
	int test_ctx = 12345;
	kbvas_register_batch_callback(kbvas, on_batch_callback, &test_ctx);
	kbvas_set_batch_count(kbvas, 2);

	// First enqueue - batch not ready yet
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);

	mock().expectOneCall("on_batch_callback")
		.withPointerParameter("self", kbvas)
		.withPointerParameter("ctx", &test_ctx);
	// Second enqueue - batch should be ready now
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
}

TEST(KBVAS, batchCallback_ShouldNotCrash_WhenCallbackIsNull) {
	kbvas_register_batch_callback(kbvas, NULL, NULL);
	kbvas_set_batch_count(kbvas, 2);

	// Should not crash even though callback is NULL
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
}

TEST(KBVAS, batchCallback_ShouldBeCalledMultipleTimes_WhenBatchReadyMultipleTimes) {
	int call_count = 0;

	kbvas_register_batch_callback(kbvas, on_batch_callback, &call_count);
	kbvas_set_batch_count(kbvas, 2);

	mock().expectNCalls(3, "on_batch_callback")
		.withPointerParameter("self", kbvas)
		.withPointerParameter("ctx", &call_count);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	// First batch
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
	LONGS_EQUAL(1, call_count);
	// Second batch
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x03", 6);
	LONGS_EQUAL(2, call_count);
	// Third batch
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x04", 6);
	LONGS_EQUAL(3, call_count);
}

TEST(KBVAS, batchCallback_ShouldBeCalledMultipleTimes_WhenBatchesAreSeparatedByDequeues) {
	int call_count = 0;

	kbvas_register_batch_callback(kbvas, on_batch_callback, &call_count);
	kbvas_set_batch_count(kbvas, 2);

	mock().expectNCalls(2, "on_batch_callback")
		.withPointerParameter("self", kbvas)
		.withPointerParameter("ctx", &call_count);
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x01", 6);
	// First batch
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x02", 6);
	LONGS_EQUAL(1, call_count);

	kbvas_dequeue(kbvas, NULL);
	kbvas_dequeue(kbvas, NULL);

	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x03", 6);
	// Second batch
	kbvas_enqueue(kbvas, "\xA1\x04\x00\x00\x00\x04", 6);
	LONGS_EQUAL(2, call_count);
}
